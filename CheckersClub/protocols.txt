using OwlTree;

public class ProjectRpcProtocols : RpcProtocols
{
    public override uint[] GetRpcIds()
    {
        return new uint[]
        {
            10U,
            11U,
            12U,
            13U,
            14U,
            15U,
            16U,
            17U,
            18U,
            19U,
            20U,
            21U,
            22U,
            23U,
            24U
        };
    }

    public override Type[] GetProtocol(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(int),
                    typeof(ClientId),
                    typeof(bool)
                };
            case 11U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(NetworkString<Capacity32>)
                };
            case 12U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(ClientId)
                };
            case 13U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(bool),
                    typeof(ClientId)
                };
            case 14U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(ClientId)
                };
            case 15U:
                return new Type[]
                {
                    typeof(ClientId)
                };
            case 16U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(int),
                    typeof(NetworkList<Capacity8, NetworkList<Capacity8, byte>>)
                };
            case 17U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(int),
                    typeof(ClientId),
                    typeof(BoardCell),
                    typeof(BoardCell)
                };
            case 18U:
                return new Type[]
                {
                    typeof(int),
                    typeof(BoardCell),
                    typeof(BoardCell),
                    typeof(ClientId)
                };
            case 19U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(ClientId)
                };
            case 20U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(int)
                };
            case 21U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(int)
                };
            case 22U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(ClientId)
                };
            case 23U:
                return new Type[]
                {
                    typeof(ClientId),
                    typeof(NetworkDict<Capacity16, ClientId, NetworkString<Capacity32>>)
                };
            case 24U:
                return new Type[]
                {
                    typeof(NetworkString<Capacity32>),
                    typeof(ClientId)
                };
            default:
                return null;
        }
    }

    public override int GetRpcCalleeParam(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return 0;
            case 11U:
                return -1;
            case 12U:
                return -1;
            case 13U:
                return -1;
            case 14U:
                return 0;
            case 15U:
                return 0;
            case 16U:
                return 0;
            case 17U:
                return 0;
            case 18U:
                return -1;
            case 19U:
                return 0;
            case 20U:
                return 0;
            case 21U:
                return 0;
            case 22U:
                return 0;
            case 23U:
                return 0;
            case 24U:
                return -1;
            default:
                return -1;
        }
    }

    public override RpcCaller GetRpcCaller(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return RpcCaller.Server;
            case 11U:
                return RpcCaller.Server;
            case 12U:
                return RpcCaller.Client;
            case 13U:
                return RpcCaller.Client;
            case 14U:
                return RpcCaller.Server;
            case 15U:
                return RpcCaller.Server;
            case 16U:
                return RpcCaller.Server;
            case 17U:
                return RpcCaller.Server;
            case 18U:
                return RpcCaller.Client;
            case 19U:
                return RpcCaller.Server;
            case 20U:
                return RpcCaller.Server;
            case 21U:
                return RpcCaller.Server;
            case 22U:
                return RpcCaller.Server;
            case 23U:
                return RpcCaller.Server;
            case 24U:
                return RpcCaller.Client;
            default:
                return RpcCaller.Any;
        }
    }

    public override int GetRpcCallerParam(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return -1;
            case 11U:
                return -1;
            case 12U:
                return 1;
            case 13U:
                return 2;
            case 14U:
                return -1;
            case 15U:
                return -1;
            case 16U:
                return -1;
            case 17U:
                return -1;
            case 18U:
                return 3;
            case 19U:
                return -1;
            case 20U:
                return -1;
            case 21U:
                return -1;
            case 22U:
                return -1;
            case 23U:
                return -1;
            case 24U:
                return 1;
            default:
                return -1;
        }
    }

    public override string GetRpcName(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return "AddNewBoard";
            case 11U:
                return "BroadcastUsername";
            case 12U:
                return "ChallengePlayer";
            case 13U:
                return "ChallengeResponse";
            case 14U:
                return "DeclareWinner";
            case 15U:
                return "DenyUsername";
            case 16U:
                return "EnforceBoardState";
            case 17U:
                return "EnforceMove";
            case 18U:
                return "MakeMove";
            case 19U:
                return "RejectChallenge";
            case 20U:
                return "RemoveBoard";
            case 21U:
                return "RequestMove";
            case 22U:
                return "SendChallenge";
            case 23U:
                return "SendPlayers";
            case 24U:
                return "SendUsername";
            default:
                return "";
        }
    }

    public override string GetRpcParamName(uint rpcId, int paramInd)
    {
        switch (rpcId)
        {
            case 10U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "id";
                    case 2:
                        return "otherPlayer";
                    case 3:
                        return "isRed";
                    default:
                        return "";
                }

            case 11U:
                switch (paramInd)
                {
                    case 0:
                        return "player";
                    case 1:
                        return "name";
                    default:
                        return "";
                }

            case 12U:
                switch (paramInd)
                {
                    case 0:
                        return "player";
                    case 1:
                        return "caller";
                    default:
                        return "";
                }

            case 13U:
                switch (paramInd)
                {
                    case 0:
                        return "challenger";
                    case 1:
                        return "response";
                    case 2:
                        return "caller";
                    default:
                        return "";
                }

            case 14U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "winner";
                    default:
                        return "";
                }

            case 15U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    default:
                        return "";
                }

            case 16U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "id";
                    case 2:
                        return "state";
                    default:
                        return "";
                }

            case 17U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "boardId";
                    case 2:
                        return "player";
                    case 3:
                        return "from";
                    case 4:
                        return "to";
                    default:
                        return "";
                }

            case 18U:
                switch (paramInd)
                {
                    case 0:
                        return "boardId";
                    case 1:
                        return "from";
                    case 2:
                        return "to";
                    case 3:
                        return "caller";
                    default:
                        return "";
                }

            case 19U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "player";
                    default:
                        return "";
                }

            case 20U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "id";
                    default:
                        return "";
                }

            case 21U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "boardId";
                    default:
                        return "";
                }

            case 22U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "challenger";
                    default:
                        return "";
                }

            case 23U:
                switch (paramInd)
                {
                    case 0:
                        return "callee";
                    case 1:
                        return "players";
                    default:
                        return "";
                }

            case 24U:
                switch (paramInd)
                {
                    case 0:
                        return "name";
                    case 1:
                        return "caller";
                    default:
                        return "";
                }

            default:
                return "";
        }
    }

    public override Protocol GetSendProtocol(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return Protocol.Tcp;
            case 11U:
                return Protocol.Tcp;
            case 12U:
                return Protocol.Tcp;
            case 13U:
                return Protocol.Tcp;
            case 14U:
                return Protocol.Tcp;
            case 15U:
                return Protocol.Tcp;
            case 16U:
                return Protocol.Tcp;
            case 17U:
                return Protocol.Tcp;
            case 18U:
                return Protocol.Tcp;
            case 19U:
                return Protocol.Tcp;
            case 20U:
                return Protocol.Tcp;
            case 21U:
                return Protocol.Tcp;
            case 22U:
                return Protocol.Tcp;
            case 23U:
                return Protocol.Tcp;
            case 24U:
                return Protocol.Tcp;
            default:
                return Protocol.Tcp;
        }
    }

    public override bool IsInvokeOnCaller(uint rpcId)
    {
        switch (rpcId)
        {
            case 10U:
                return false;
            case 11U:
                return true;
            case 12U:
                return true;
            case 13U:
                return false;
            case 14U:
                return false;
            case 15U:
                return false;
            case 16U:
                return false;
            case 17U:
                return false;
            case 18U:
                return true;
            case 19U:
                return false;
            case 20U:
                return true;
            case 21U:
                return false;
            case 22U:
                return false;
            case 23U:
                return false;
            case 24U:
                return false;
            default:
                return false;
        }
    }

    protected override void InvokeRpc(uint rpcId, NetworkObject target, object[] args)
    {
        switch (rpcId)
        {
            case 10U:
                ((BoardManager)target).AddNewBoard((ClientId)args[0], (int)args[1], (ClientId)args[2], (bool)args[3]);
                break;
            case 11U:
                ((PlayerManager)target).BroadcastUsername((ClientId)args[0], (NetworkString<Capacity32>)args[1]);
                break;
            case 12U:
                ((BoardManager)target).ChallengePlayer((ClientId)args[0], (ClientId)args[1]);
                break;
            case 13U:
                ((BoardManager)target).ChallengeResponse((ClientId)args[0], (bool)args[1], (ClientId)args[2]);
                break;
            case 14U:
                ((BoardManager)target).DeclareWinner((ClientId)args[0], (ClientId)args[1]);
                break;
            case 15U:
                ((PlayerManager)target).DenyUsername((ClientId)args[0]);
                break;
            case 16U:
                ((BoardManager)target).EnforceBoardState((ClientId)args[0], (int)args[1], (NetworkList<Capacity8, NetworkList<Capacity8, byte>>)args[2]);
                break;
            case 17U:
                ((BoardManager)target).EnforceMove((ClientId)args[0], (int)args[1], (ClientId)args[2], (BoardCell)args[3], (BoardCell)args[4]);
                break;
            case 18U:
                ((BoardManager)target).MakeMove((int)args[0], (BoardCell)args[1], (BoardCell)args[2], (ClientId)args[3]);
                break;
            case 19U:
                ((BoardManager)target).RejectChallenge((ClientId)args[0], (ClientId)args[1]);
                break;
            case 20U:
                ((BoardManager)target).RemoveBoard((ClientId)args[0], (int)args[1]);
                break;
            case 21U:
                ((BoardManager)target).RequestMove((ClientId)args[0], (int)args[1]);
                break;
            case 22U:
                ((BoardManager)target).SendChallenge((ClientId)args[0], (ClientId)args[1]);
                break;
            case 23U:
                ((PlayerManager)target).SendPlayers((ClientId)args[0], (NetworkDict<Capacity16, ClientId, NetworkString<Capacity32>>)args[1]);
                break;
            case 24U:
                ((PlayerManager)target).SendUsername((NetworkString<Capacity32>)args[0], (ClientId)args[1]);
                break;
        }
    }
}